apiVersion: apps/v1
kind: Deployment
metadata:
  name: udiskbackup
  labels: { app: udiskbackup }
spec:
  replicas: 1
  selector:
    matchLabels: { app: udiskbackup }
  template:
    metadata:
      labels: { app: udiskbackup }
    spec:
      containers:
      - name: udiskbackup
        image: udiskbackup:1
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: ASPNETCORE_URLS
          value: "http://0.0.0.0:8080"
        # appka potrzebuje realnych ścieżek hosta:
        volumeMounts:
        - name: host-mnt-shared     # źródło
          mountPath: /mnt/shared
          readOnly: true
        - name: host-media          # miejsca montowania USB (UDisks najczęściej /media/<user>/<Label>)
          mountPath: /media
        - name: host-mnt            # alternatywne miejsca montowania USB
          mountPath: /mnt
        - name: host-run-media      # niektóre dystrybucje montują w /run/media/<user>/<Label>
          mountPath: /run/media
        - name: host-sys            # lsblk/udev widzą prawdziwy sprzęt
          mountPath: /sys
          readOnly: true
        - name: host-dev            # ostrożnie: tylko do odczytu
          mountPath: /host-dev
          readOnly: true
        - name: host-dbus           # socket systemowego D-Bus (UDisks2 events)
          mountPath: /run/dbus/system_bus_socket
          readOnly: true
        - name: host-run-udev       # metadata udev (nie zawsze konieczne)
          mountPath: /run/udev
          readOnly: true
        securityContext:
          # prościej i bez niespodzianek w domowym k3s:
          privileged: true
          runAsUser: 0
        readinessProbe:
          httpGet: { path: /api/disks, port: http }
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet: { path: /api/disks, port: http }
          initialDelaySeconds: 10
          periodSeconds: 20
      volumes:
      - name: host-mnt-shared
        hostPath: { path: /mnt/shared, type: DirectoryOrCreate }
      - name: host-media
        hostPath: { path: /media, type: DirectoryOrCreate }
      - name: host-mnt
        hostPath: { path: /mnt, type: DirectoryOrCreate }
      - name: host-run-media
        hostPath: { path: /run/media, type: DirectoryOrCreate }
      - name: host-sys
        hostPath: { path: /sys, type: Directory }
      - name: host-dev
        hostPath: { path: /dev, type: Directory }
      - name: host-dbus
        hostPath: { path: /run/dbus/system_bus_socket, type: Socket }
      - name: host-run-udev
        hostPath: { path: /run/udev, type: Directory }

---
apiVersion: v1
kind: Service
metadata:
  name: udiskbackup
  labels: { app: udiskbackup }
spec:
  selector: { app: udiskbackup }
  ports:
  - name: http
    port: 80
    targetPort: http

---
# Traefik jest domyślnie w k3s. Jeśli używasz innego IngressController, dostosuj adnotacje.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: udiskbackup
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: web
spec:
  rules:
  - host: udiskbackup.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: udiskbackup
            port:
              number: 80
